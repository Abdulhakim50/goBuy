generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your chosen provider
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Only if using Credentials provider
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cart          Cart?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- E-commerce Specific Models ---

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  price       Float    // Store price in cents (Int) in production! Use Float here for simplicity.
  images      String[] // Array of image URLs
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Optional: Category Relation
  // categoryId String?
  // category   Category? @relation(fields: [categoryId], references: [id])

  orderItems OrderItem[]
  cartItems  CartItem[]
}

// Optional: Category
// model Category {
//   id        String    @id @default(cuid())
//   name      String    @unique
//   slug      String    @unique
//   products  Product[]
// }

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique // Each user has one cart
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([cartId, productId]) // User can only have one entry per product in cart
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  totalAmount   Float // Store price in cents (Int) in production!
  status        String      @default("PENDING") // PENDING, PAID, SHIPPED, DELIVERED, CANCELED
  shippingAddress String?   @db.Text // Store structured address in production
  stripePaymentIntentId String? @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float // Price at the time of order // Store price in cents (Int) in production!
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict) // Don't delete product if in an order

  @@unique([orderId, productId])
}